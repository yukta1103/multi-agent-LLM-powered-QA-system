# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from android_env.proto import snapshot_service_pb2 as android__env_dot_proto_dot_snapshot__service__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in android_env/proto/snapshot_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class SnapshotServiceStub(object):
    """The SnapshotService enables you to list, insert, store, and retrieve
    snapshots.

    Currently there are two types of snapshots:

    - Local (default): These are snapshots that are created locally. They are
    stored internally inside qcow2 files and are very efficient. These are
    the snapshots usually created by interacting with the UI.

    - Remote: These are snapshots that have been exported at a certain point.
    an exported snapshot is normalized (completely self contained) and
    can be imported into an emulator with a similar hardware configuration.

    Currently the emulator has limited support for importing snapshots:
    - Once an imported snapshot has been loaded into an emulator it is no longer
    possible to create new snapshots.
    - The hardware configuration of the emulator your are pushing a snapshot to
    must match (or be very similar) to the one you pulled the snapshot from.

    For example do not expect to be able to restore a snapshot on created on an
    Intel cpu on an AMD cpu.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListSnapshots = channel.unary_unary(
                '/android.emulation.control.SnapshotService/ListSnapshots',
                request_serializer=android__env_dot_proto_dot_snapshot__service__pb2.SnapshotFilter.SerializeToString,
                response_deserializer=android__env_dot_proto_dot_snapshot__service__pb2.SnapshotList.FromString,
                _registered_method=True)
        self.PullSnapshot = channel.unary_stream(
                '/android.emulation.control.SnapshotService/PullSnapshot',
                request_serializer=android__env_dot_proto_dot_snapshot__service__pb2.SnapshotPackage.SerializeToString,
                response_deserializer=android__env_dot_proto_dot_snapshot__service__pb2.SnapshotPackage.FromString,
                _registered_method=True)
        self.PushSnapshot = channel.stream_unary(
                '/android.emulation.control.SnapshotService/PushSnapshot',
                request_serializer=android__env_dot_proto_dot_snapshot__service__pb2.SnapshotPackage.SerializeToString,
                response_deserializer=android__env_dot_proto_dot_snapshot__service__pb2.SnapshotPackage.FromString,
                _registered_method=True)
        self.LoadSnapshot = channel.unary_unary(
                '/android.emulation.control.SnapshotService/LoadSnapshot',
                request_serializer=android__env_dot_proto_dot_snapshot__service__pb2.SnapshotPackage.SerializeToString,
                response_deserializer=android__env_dot_proto_dot_snapshot__service__pb2.SnapshotPackage.FromString,
                _registered_method=True)
        self.SaveSnapshot = channel.unary_unary(
                '/android.emulation.control.SnapshotService/SaveSnapshot',
                request_serializer=android__env_dot_proto_dot_snapshot__service__pb2.SnapshotPackage.SerializeToString,
                response_deserializer=android__env_dot_proto_dot_snapshot__service__pb2.SnapshotPackage.FromString,
                _registered_method=True)
        self.DeleteSnapshot = channel.unary_unary(
                '/android.emulation.control.SnapshotService/DeleteSnapshot',
                request_serializer=android__env_dot_proto_dot_snapshot__service__pb2.SnapshotPackage.SerializeToString,
                response_deserializer=android__env_dot_proto_dot_snapshot__service__pb2.SnapshotPackage.FromString,
                _registered_method=True)
        self.TrackProcess = channel.unary_unary(
                '/android.emulation.control.SnapshotService/TrackProcess',
                request_serializer=android__env_dot_proto_dot_snapshot__service__pb2.IceboxTarget.SerializeToString,
                response_deserializer=android__env_dot_proto_dot_snapshot__service__pb2.IceboxTarget.FromString,
                _registered_method=True)


class SnapshotServiceServicer(object):
    """The SnapshotService enables you to list, insert, store, and retrieve
    snapshots.

    Currently there are two types of snapshots:

    - Local (default): These are snapshots that are created locally. They are
    stored internally inside qcow2 files and are very efficient. These are
    the snapshots usually created by interacting with the UI.

    - Remote: These are snapshots that have been exported at a certain point.
    an exported snapshot is normalized (completely self contained) and
    can be imported into an emulator with a similar hardware configuration.

    Currently the emulator has limited support for importing snapshots:
    - Once an imported snapshot has been loaded into an emulator it is no longer
    possible to create new snapshots.
    - The hardware configuration of the emulator your are pushing a snapshot to
    must match (or be very similar) to the one you pulled the snapshot from.

    For example do not expect to be able to restore a snapshot on created on an
    Intel cpu on an AMD cpu.
    """

    def ListSnapshots(self, request, context):
        """Lists all the snapshots, filtered by the given query, that are stored
        locally for the currently running avd. This includes all the snapshots that
        were imported (pushed) into this emulator.

        Returns a list of snapshot_id's and associated details that describes
        the hardware configuration, logical name, etc of the snapshot.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PullSnapshot(self, request, context):
        """Pulls down the snapshot stored inside the AVD as a tar.gz/tar stream
        This will normalize the snapshot, all relevant data to push a snapshot
        into a similar emulator will be placed inside the tar file.

        Pulling  down a snapshot will pause the emulator until the snapshots
        are rebased and ready for exporting. Once the snapshot is rebased
        the emulator will continue and downloading should commence.

        Note that pulling .gz stream is slow.

        You must provide the snapshot_id and (desired) format.

        If SnapshotPackage.path is set, the gRPC service will directly write the
        exported snapshot to SnapshotPackage.path without streaming, which is
        usually significantly faster. It would require emulator to have direct
        access to SnapshotPackage.path, which usually means it can only be used
        when pulling from a local emulator.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PushSnapshot(self, request_iterator, context):
        """Push a tar.gz stream contain the snapshot. The tar file should
        be a snapshot that was exported through the PullSnapshot in the past.
        The emulator will try to import the snapshot. The hardware configuration
        of the current emulator should match the one used for pulling.

        A detailed description of the snapshot (emulator_snapshot.Snapshot)
        is stored in the snapshot.pb file inside the tar.

        You must provide the snapshot_id and format in the first message.
        Will return success and a possible error message when a failure occurs.

        If SnapshotPackage.path is set, the gRPC service will directly unzip the
        exported snapshot from SnapshotPackage.path without streaming, which is
        usually significantly faster. It would require emulator to have direct
        access to SnapshotPackage.path, which usually means it can only be used
        when pushing to a local emulator.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoadSnapshot(self, request, context):
        """Loads the given snapshot inside the emulator and activates it.
        The device will be in the state as it was when the snapshot was created.

        You will no longer be able to call Save if this was an imported
        snapshot that was pushed into this emulator.

        You must provide the snapshot_id to indicate which snapshot to load
        Will return success and a possible error message when a failure occurs.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SaveSnapshot(self, request, context):
        """Creates as a snapshot of the current state of the emulator.
        You can only save a snapshot if you never activated (Load) an imported
        snapshot (Push).

        For example:
        - PushSnapshot("some_snap.tar.gz");
        - LoadSnapshot("some_snap");
        - SaveSnapshot("same_newer_snap"); // <--- Will currently fail.

        You can provide the snapshot_id to indicate the name used for storing.
        Will return success and a possible error message when a failure occurs.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteSnapshot(self, request, context):
        """Deletes the snapshot with the given snapshot_id from the avd.

        You must provide the snapshot_id to indicate which snapshot to delete.
        Will return success and a possible error message when a failure occurs.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TrackProcess(self, request, context):
        """Tracks the given process for automated snapshot creation in case of
        assert failures.

        Will return success and a possible error message when a failure occurs.
        The snapshot_id field will contain the name of the snapshot that
        will be created. The pid field will contain the process id that is
        being tracked.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SnapshotServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListSnapshots': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSnapshots,
                    request_deserializer=android__env_dot_proto_dot_snapshot__service__pb2.SnapshotFilter.FromString,
                    response_serializer=android__env_dot_proto_dot_snapshot__service__pb2.SnapshotList.SerializeToString,
            ),
            'PullSnapshot': grpc.unary_stream_rpc_method_handler(
                    servicer.PullSnapshot,
                    request_deserializer=android__env_dot_proto_dot_snapshot__service__pb2.SnapshotPackage.FromString,
                    response_serializer=android__env_dot_proto_dot_snapshot__service__pb2.SnapshotPackage.SerializeToString,
            ),
            'PushSnapshot': grpc.stream_unary_rpc_method_handler(
                    servicer.PushSnapshot,
                    request_deserializer=android__env_dot_proto_dot_snapshot__service__pb2.SnapshotPackage.FromString,
                    response_serializer=android__env_dot_proto_dot_snapshot__service__pb2.SnapshotPackage.SerializeToString,
            ),
            'LoadSnapshot': grpc.unary_unary_rpc_method_handler(
                    servicer.LoadSnapshot,
                    request_deserializer=android__env_dot_proto_dot_snapshot__service__pb2.SnapshotPackage.FromString,
                    response_serializer=android__env_dot_proto_dot_snapshot__service__pb2.SnapshotPackage.SerializeToString,
            ),
            'SaveSnapshot': grpc.unary_unary_rpc_method_handler(
                    servicer.SaveSnapshot,
                    request_deserializer=android__env_dot_proto_dot_snapshot__service__pb2.SnapshotPackage.FromString,
                    response_serializer=android__env_dot_proto_dot_snapshot__service__pb2.SnapshotPackage.SerializeToString,
            ),
            'DeleteSnapshot': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteSnapshot,
                    request_deserializer=android__env_dot_proto_dot_snapshot__service__pb2.SnapshotPackage.FromString,
                    response_serializer=android__env_dot_proto_dot_snapshot__service__pb2.SnapshotPackage.SerializeToString,
            ),
            'TrackProcess': grpc.unary_unary_rpc_method_handler(
                    servicer.TrackProcess,
                    request_deserializer=android__env_dot_proto_dot_snapshot__service__pb2.IceboxTarget.FromString,
                    response_serializer=android__env_dot_proto_dot_snapshot__service__pb2.IceboxTarget.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'android.emulation.control.SnapshotService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('android.emulation.control.SnapshotService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SnapshotService(object):
    """The SnapshotService enables you to list, insert, store, and retrieve
    snapshots.

    Currently there are two types of snapshots:

    - Local (default): These are snapshots that are created locally. They are
    stored internally inside qcow2 files and are very efficient. These are
    the snapshots usually created by interacting with the UI.

    - Remote: These are snapshots that have been exported at a certain point.
    an exported snapshot is normalized (completely self contained) and
    can be imported into an emulator with a similar hardware configuration.

    Currently the emulator has limited support for importing snapshots:
    - Once an imported snapshot has been loaded into an emulator it is no longer
    possible to create new snapshots.
    - The hardware configuration of the emulator your are pushing a snapshot to
    must match (or be very similar) to the one you pulled the snapshot from.

    For example do not expect to be able to restore a snapshot on created on an
    Intel cpu on an AMD cpu.
    """

    @staticmethod
    def ListSnapshots(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/android.emulation.control.SnapshotService/ListSnapshots',
            android__env_dot_proto_dot_snapshot__service__pb2.SnapshotFilter.SerializeToString,
            android__env_dot_proto_dot_snapshot__service__pb2.SnapshotList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PullSnapshot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/android.emulation.control.SnapshotService/PullSnapshot',
            android__env_dot_proto_dot_snapshot__service__pb2.SnapshotPackage.SerializeToString,
            android__env_dot_proto_dot_snapshot__service__pb2.SnapshotPackage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PushSnapshot(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/android.emulation.control.SnapshotService/PushSnapshot',
            android__env_dot_proto_dot_snapshot__service__pb2.SnapshotPackage.SerializeToString,
            android__env_dot_proto_dot_snapshot__service__pb2.SnapshotPackage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LoadSnapshot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/android.emulation.control.SnapshotService/LoadSnapshot',
            android__env_dot_proto_dot_snapshot__service__pb2.SnapshotPackage.SerializeToString,
            android__env_dot_proto_dot_snapshot__service__pb2.SnapshotPackage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SaveSnapshot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/android.emulation.control.SnapshotService/SaveSnapshot',
            android__env_dot_proto_dot_snapshot__service__pb2.SnapshotPackage.SerializeToString,
            android__env_dot_proto_dot_snapshot__service__pb2.SnapshotPackage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteSnapshot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/android.emulation.control.SnapshotService/DeleteSnapshot',
            android__env_dot_proto_dot_snapshot__service__pb2.SnapshotPackage.SerializeToString,
            android__env_dot_proto_dot_snapshot__service__pb2.SnapshotPackage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TrackProcess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/android.emulation.control.SnapshotService/TrackProcess',
            android__env_dot_proto_dot_snapshot__service__pb2.IceboxTarget.SerializeToString,
            android__env_dot_proto_dot_snapshot__service__pb2.IceboxTarget.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
