# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from android_env.proto.a11y import a11y_pb2 as android__env_dot_proto_dot_a11y_dot_a11y__pb2
from android_env.proto.a11y import android_accessibility_forest_pb2 as android__env_dot_proto_dot_a11y_dot_android__accessibility__forest__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in android_env/proto/a11y/a11y_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class A11yServiceStub(object):
    """A service to send Accessibility information to a remote server.

    The client is assumed to be running inside an Android device (e.g. emulator
    or real device) while the server is assumed to be running outside (e.g. in a
    Python process).
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendForest = channel.unary_unary(
                '/android_env.A11yService/SendForest',
                request_serializer=android__env_dot_proto_dot_a11y_dot_android__accessibility__forest__pb2.AndroidAccessibilityForest.SerializeToString,
                response_deserializer=android__env_dot_proto_dot_a11y_dot_a11y__pb2.ForestResponse.FromString,
                _registered_method=True)
        self.SendEvent = channel.unary_unary(
                '/android_env.A11yService/SendEvent',
                request_serializer=android__env_dot_proto_dot_a11y_dot_a11y__pb2.EventRequest.SerializeToString,
                response_deserializer=android__env_dot_proto_dot_a11y_dot_a11y__pb2.EventResponse.FromString,
                _registered_method=True)
        self.Bidi = channel.stream_stream(
                '/android_env.A11yService/Bidi',
                request_serializer=android__env_dot_proto_dot_a11y_dot_a11y__pb2.ClientToServer.SerializeToString,
                response_deserializer=android__env_dot_proto_dot_a11y_dot_a11y__pb2.ServerToClient.FromString,
                _registered_method=True)


class A11yServiceServicer(object):
    """A service to send Accessibility information to a remote server.

    The client is assumed to be running inside an Android device (e.g. emulator
    or real device) while the server is assumed to be running outside (e.g. in a
    Python process).
    """

    def SendForest(self, request, context):
        """Sends a forest of Accessibility trees to a server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendEvent(self, request, context):
        """Sends an a11y event to a server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Bidi(self, request_iterator, context):
        """Long-lived bidirection communication between the client and the server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_A11yServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendForest': grpc.unary_unary_rpc_method_handler(
                    servicer.SendForest,
                    request_deserializer=android__env_dot_proto_dot_a11y_dot_android__accessibility__forest__pb2.AndroidAccessibilityForest.FromString,
                    response_serializer=android__env_dot_proto_dot_a11y_dot_a11y__pb2.ForestResponse.SerializeToString,
            ),
            'SendEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.SendEvent,
                    request_deserializer=android__env_dot_proto_dot_a11y_dot_a11y__pb2.EventRequest.FromString,
                    response_serializer=android__env_dot_proto_dot_a11y_dot_a11y__pb2.EventResponse.SerializeToString,
            ),
            'Bidi': grpc.stream_stream_rpc_method_handler(
                    servicer.Bidi,
                    request_deserializer=android__env_dot_proto_dot_a11y_dot_a11y__pb2.ClientToServer.FromString,
                    response_serializer=android__env_dot_proto_dot_a11y_dot_a11y__pb2.ServerToClient.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'android_env.A11yService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('android_env.A11yService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class A11yService(object):
    """A service to send Accessibility information to a remote server.

    The client is assumed to be running inside an Android device (e.g. emulator
    or real device) while the server is assumed to be running outside (e.g. in a
    Python process).
    """

    @staticmethod
    def SendForest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/android_env.A11yService/SendForest',
            android__env_dot_proto_dot_a11y_dot_android__accessibility__forest__pb2.AndroidAccessibilityForest.SerializeToString,
            android__env_dot_proto_dot_a11y_dot_a11y__pb2.ForestResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/android_env.A11yService/SendEvent',
            android__env_dot_proto_dot_a11y_dot_a11y__pb2.EventRequest.SerializeToString,
            android__env_dot_proto_dot_a11y_dot_a11y__pb2.EventResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Bidi(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/android_env.A11yService/Bidi',
            android__env_dot_proto_dot_a11y_dot_a11y__pb2.ClientToServer.SerializeToString,
            android__env_dot_proto_dot_a11y_dot_a11y__pb2.ServerToClient.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
